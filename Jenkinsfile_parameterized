pipeline {

    agent any

    parameters {
        gitParameter name: 'BRANCH', type: 'PT_BRANCH', defaultValue: 'origin/master', branchFilter: 'origin/(.*)', description: 'Select Git branch to build'
        booleanParam(name: 'mvn_build', defaultValue: true, description: 'Run Maven Build?')
        booleanParam(name: 'publish_to_nexus', defaultValue: true, description: 'Publish artifact to Nexus?')
    }

    tools {
        maven "MVN_HOME"  // Make sure "Maven" is set in Jenkins > Global Tool Configuration
    }

    environment {
        // Nexus settings
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "3.95.29.162:8081"
        NEXUS_REPOSITORY = "ncodeit-hello-world"
        NEXUS_CREDENTIAL_ID = "nexus_keygen"

        // Tomcat deployment settings
        TOMCAT_URL = "http://13.221.159.29:8081/manager/html/deploy?path=/SimpleCustomerApp&update=true"
        TOMCAT_CREDENTIAL_ID = "tomcat"
    }

    stages {

        stage("Clone Code") {
            steps {
                script {
                    git branch: "${params.BRANCH}", url: 'https://github.com/arlasaikiran143/spring3-mvc-maven-xml-hello-world-1.git'
                }
            }
        }

        stage("Maven Build") {
            when {
                expression { params.mvn_build }
            }
            steps {
                script {
                    sh 'mvn -Dmaven.test.failure.ignore=true clean install'
                }
            }
        }

        stage("Publish to Nexus") {
            when {
                expression { params.publish_to_nexus }
            }
            steps {
                script {
                    def pom = readMavenPom file: "pom.xml"
                    def filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
                    def artifactPath = filesByGlob[0].path
                    def artifactExists = fileExists(artifactPath)

                    if (artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}"
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId, classifier: '', file: artifactPath, type: pom.packaging],
                                [artifactId: pom.artifactId, classifier: '', file: "pom.xml", type: "pom"]
                            ]
                        )
                    } else {
                        error "*** File: ${artifactPath}, could not be found"
                    }
                }
            }
        }

        stage("Deploy to Tomcat") {
            steps {
                script {
                    def warFiles = findFiles(glob: 'target/*.war')
                    if (warFiles.length == 0) {
                        error "No WAR file found in target directory"
                    }
                    def warFile = warFiles[0].path

                    withCredentials([usernamePassword(credentialsId: TOMCAT_CREDENTIAL_ID, usernameVariable: 'TOMCAT_USER', passwordVariable: 'TOMCAT_PASS')]) {
                        sh """
                            curl -u $TOMCAT_USER:$TOMCAT_PASS -T '${warFile}' "${TOMCAT_URL}"
                        """
                    }
                }
            }
        }
    }
}
